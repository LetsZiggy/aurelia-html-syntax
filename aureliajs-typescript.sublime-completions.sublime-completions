{
  "scope": "source.ts",
  "completions": [
    {
      "trigger": "auRouterViewModel",
      "contents": "import { View, autoinject } from \"aurelia-framework\"\nimport { RouterConfiguration, Router } from \"aurelia-router\"\n\n@autoinject()\nexport class ${1:RouterViewModel} {\n\t#router: Router\n\n\tconstructor () {$0}\n\n\tconfigureRouter (config: RouterConfiguration, router: Router): void | Promise<void> | PromiseLike<void> {\n\t\tthis.#router = router\n\t\tconfig.title = \"$2\"\n\t\tconfig.titleSeparator = \" | \"\n\t\tconfig.options.pushState = true\n\t\tconfig.options.root = \"/\"\n\t\tconfig.map([\n\t\t\t{\n\t\t\t\troute: \"$3\",\n\t\t\t\tname: \"$3\",\n\t\t\t\tmoduleId: \"$4\",\n\t\t\t\tnav: ${5:true},\n\t\t\t\ttitle: \"$6\",\n\t\t\t\tcaseSensitive: false,\n\t\t\t\tsettings: {},\n\t\t\t},\n\t\t])\n\n\t\tconfig.mapUnknownRoutes(\"$7\")\n\t\tconfig.fallbackRoute(\"$8\")\n\t}\n\n\tcreated (owningView: View, myView: View): void {}\n\n\tbind (bindingContext: Object, overrideContext: Object): void {}\n\n\tattached (): void {}\n\n\tdetached (): void {}\n\n\tunbind (): void {}\n}\n",
      "annotation": "au Router ViewModel",
      "kind": "snippet",
      "details": "Aurelia <a href=\"http://aurelia.io/docs/routing/configuration#basic-configuration\">Router ViewModel</a> snippet",
    },
    {
      "trigger": "auComponentViewModel",
      "contents": "import { View, autoinject } from \"aurelia-framework\"\nimport { IObservable, RouteConfig, NavigationCommand, NavigationInstruction } from \"aurelia-router\"\n\n@autoinject()\nexport class ${1:ComponentViewModel} {\n\tconstructor () {$0}\n\n\tcanActivate (params: any, routeConfig: RouteConfig, navigationInstruction: NavigationInstruction): boolean | Promise<boolean> | PromiseLike<boolean> | NavigationCommand | Promise<NavigationCommand> | PromiseLike<NavigationCommand> {}\n\n\tactivate (params: any, routeConfig: RouteConfig, navigationInstruction: NavigationInstruction): void | Promise<void> | PromiseLike<void> | IObservable {}\n\n\tcreated (owningView: View, myView: View): void {}\n\n\tbind (bindingContext: Object, overrideContext: Object): void {}\n\n\tattached (): void {}\n\n\tcanDeactivate (): boolean | Promise<boolean> | PromiseLike<boolean> | NavigationCommand {}\n\n\tdeactivate (): void | Promise<void> | PromiseLike<void> | IObservable {}\n\n\tdetached (): void {}\n\n\tunbind (): void {}\n}\n",
      "annotation": "au Component ViewModel",
      "kind": "snippet",
      "details": "Aurelia <a href=\"http://aurelia.io/docs/fundamentals/cheat-sheet#routing\">Component ViewModel</a> snippet",
    },
    {
      "trigger": "auElementViewModel",
      "contents": "import { View, autoinject, bindable } from \"aurelia-framework\"\n\n@autoinject()\nexport class ${1:ElementViewModel} {\n\t@bindable()\n\t${2:value}: ${3:any}\n\n\tconstructor () {$0}\n\n\t${2:value}Changed (newValue: ${3:any}, oldValue: ${3:any}): void {}\n\n\tcreated (owningView: View, myView: View): void {}\n\n\tbind (bindingContext: Object, overrideContext: Object): void {}\n\n\tattached (): void {}\n\n\tdetached (): void {}\n\n\tunbind (): void {}\n}\n",
      "annotation": "au Element ViewModel",
      "kind": "snippet",
      "details": "Aurelia <a href=\"http://aurelia.io/docs/fundamentals/cheat-sheet#creating-components\">Element ViewModel</a> snippet",
    },
    {
      "trigger": "auComposeViewModel",
      "contents": "import { View, autoinject } from \"aurelia-framework\"\n\n@autoinject()\nexport class ${1:ComposeViewModel} {\n\tconstructor () {$0}\n\n\tmodelChanged (newValue: any, oldValue: any): void {}\n\n\tactivate (model: any): void | Promise<void> | PromiseLike<void> | IObservable {}\n\n\tcreated (owningView: View, myView: View): void {}\n\n\tbind (bindingContext: Object, overrideContext: Object): void {}\n\n\tattached (): void {}\n\n\tdetached (): void {}\n\n\tunbind (): void {}\n}\n",
      "annotation": "au Compose ViewModel",
      "kind": "snippet",
      "details": "Aurelia <a href=\"http://aurelia.io/docs/templating/dynamic-ui-composition#introduction\">Compose ViewModel</a> snippet",
    },
    {
      "trigger": "auViewModelLifecycleCreated",
      "contents": "created (owningView: View, myView: View): void {$0}",
      "annotation": "au ViewModel Lifecycle created()",
      "kind": "snippet",
      "details": "Aurelia <a href=\"http://aurelia.io/docs/fundamentals/creating-components#the-component-lifecycle\">Element ViewModel</a> snippet",
    },
    {
      "trigger": "auViewModelLifecycleBind",
      "contents": "bind (bindingContext: Object, overrideContext: Object): void {$0}",
      "annotation": "au ViewModel Lifecycle bind()",
      "kind": "snippet",
      "details": "Aurelia <a href=\"http://aurelia.io/docs/fundamentals/creating-components#the-component-lifecycle\">Element ViewModel</a> snippet",
    },
    {
      "trigger": "auViewModelLifecycleAttached",
      "contents": "attached (): void {$0}",
      "annotation": "au ViewModel Lifecycle attached()",
      "kind": "snippet",
      "details": "Aurelia <a href=\"http://aurelia.io/docs/fundamentals/creating-components#the-component-lifecycle\">Element ViewModel</a> snippet",
    },
    {
      "trigger": "auViewModelLifecycleDetached",
      "contents": "detached (): void {$0}",
      "annotation": "au ViewModel Lifecycle detached()",
      "kind": "snippet",
      "details": "Aurelia <a href=\"http://aurelia.io/docs/fundamentals/creating-components#the-component-lifecycle\">Element ViewModel</a> snippet",
    },
    {
      "trigger": "auViewModelLifecycleUnbind",
      "contents": "unbind (): void {$0}",
      "annotation": "au ViewModel Lifecycle unbind()",
      "kind": "snippet",
      "details": "Aurelia <a href=\"http://aurelia.io/docs/fundamentals/creating-components#the-component-lifecycle\">Element ViewModel</a> snippet",
    },
    {
      "trigger": "auRouterLifecycleCanActivate",
      "contents": "canActivate (params: any, routeConfig: RouteConfig, navigationInstruction: NavigationInstruction): boolean | Promise<boolean> | PromiseLike<boolean> | NavigationCommand | Promise<NavigationCommand> | PromiseLike<NavigationCommand> {$0}",
      "annotation": "au Router Lifecycle canActivate()",
      "kind": "snippet",
      "details": "Aurelia <a href=\"http://aurelia.io/docs/fundamentals/cheat-sheet#routing\">Router canActivate()</a> snippet",
    },
    {
      "trigger": "auRouterLifecycleActivate",
      "contents": "activate (params: any, routeConfig: RouteConfig, navigationInstruction: NavigationInstruction): void | Promise<void> | PromiseLike<void> | IObservable {$0}",
      "annotation": "au Router Lifecycle activate()",
      "kind": "snippet",
      "details": "Aurelia <a href=\"http://aurelia.io/docs/fundamentals/cheat-sheet#routing\">Router activate()</a> snippet",
    },
    {
      "trigger": "auRouterLifecycleCanDeactivate",
      "contents": "canDeactivate (): boolean | Promise<boolean> | PromiseLike<boolean> | NavigationCommand {$0}",
      "annotation": "au Router Lifecycle canDeactivate()",
      "kind": "snippet",
      "details": "Aurelia <a href=\"http://aurelia.io/docs/fundamentals/cheat-sheet#routing\">Router canDeactivate()</a> snippet",
    },
    {
      "trigger": "auRouterLifecycleDeactivate",
      "contents": "deactivate (): void | Promise<void> | PromiseLike<void> | IObservable {$0}",
      "annotation": "au Router Lifecycle deactivate()",
      "kind": "snippet",
      "details": "Aurelia <a href=\"http://aurelia.io/docs/fundamentals/cheat-sheet#routing\">Router deactivate()</a> snippet",
    },
    {
      "trigger": "auRouterConfigure",
      "contents": "configureRouter (config: RouterConfiguration, router: Router): void | Promise<void> | PromiseLike<void> {\n\tthis.#router = router\n\tconfig.title = \"$1\"\n\tconfig.titleSeparator = \" | \"\n\tconfig.options.pushState = true\n\tconfig.options.root = \"/\"\n\tconfig.map([\n\t\t{\n\t\t\troute: \"$2\",\n\t\t\tname: \"$2\",\n\t\t\tmoduleId: \"$3\",\n\t\t\tnav: ${4:true},\n\t\t\ttitle: \"$5\",\n\t\t\tcaseSensitive: false,\n\t\t\tsettings: {},\n\t\t},$0\n\t])\n\n\tconfig.mapUnknownRoutes(\"$6\")\n\tconfig.fallbackRoute(\"$7\")\n}",
      "annotation": "au Router routerConfigure()",
      "kind": "snippet",
      "details": "Aurelia <a href=\"http://aurelia.io/docs/routing/configuration#basic-configuration\">RouterConfigure()</a> snippet",
    },
    {
      "trigger": "auRouterNewRoute",
      "contents": "{\n\troute: \"$1\",\n\tname: \"$1\",\n\tmoduleId: \"$2\",\n\tnav: ${3:true},\n\ttitle: \"$4\",\n\tcaseSensitive: false,\n\tsettings: {},\n},$0",
      "annotation": "au Router new route",
      "kind": "snippet",
      "details": "Aurelia <a href=\"http://aurelia.io/docs/routing/configuration#basic-configuration\">RouterConfigure()</a> snippet",
    },
    {
      "trigger": "auValidationImport",
      "contents": "import {${1: validateTrigger,}${2: validationMessages,}${3: ControllerValidateResult,}${4: ValidationController,}${5: ValidationRules} } from \"aurelia-validation\"$0",
      "annotation": "au Validation import",
      "kind": "snippet",
      "details": "Aurelia <a href=\"https://aurelia.io/docs/plugins/validation#introduction\">Validation Import</a> snippet",
    },
    {
      "trigger": "auValidationRules",
      "contents": "ValidationRules\n\t.ensure(${1:(obj: ${2:any}) => ${3:obj.}})\n\t.displayName(\"$4\")${5:\n\t.required()}\n\t.withMessage${6:Key}(\"$7\")\n\t.${8:on($9)}$0",
      "annotation": "au Validation new rule",
      "kind": "snippet",
      "details": "Aurelia <a href=\"https://aurelia.io/docs/plugins/validation#defining-rules\">ValidationRules()</a> snippet",
    },
    {
      "trigger": "auValidationMessage",
      "contents": "validationMessages[\"$1\"] = `$2`$0",
      "annotation": "au Validation message",
      "kind": "snippet",
      "details": "Aurelia <a href=\"https://aurelia.io/docs/plugins/validation#customizing-messages\">ValidationRules()</a> snippet",
    },
    {
      "trigger": "auTestComponent",
      "contents": "import { bootstrap } from \"aurelia-bootstrapper\"\nimport { ComponentTester, StageComponent } from \"aurelia-testing\"${1:\n\n$2}\n\nxdescribe(\"$3\", () => {\n\tlet component: ComponentTester\n\n\tbeforeEach((done) => {\n\t\tcomponent = StageComponent\n\t\t\t.withResources(\"$4\")\n\t\t\t.inView(`\n\t\t\t\t<$4>\n\t\t\t\t</$4>\n\t\t\t`)\n\t\t\t.boundTo({})\n\n\t\tdone()\n\t})\n\n\tafterEach((done) => {\n\t\tcomponent\n\t\t\t.dispose()\n\n\t\tdone()\n\t})\n\n\txdescribe(\"[methodName]\", () => {\n\t\txit(\"should ...\", (done) => {\n\t\t\tcomponent\n\t\t\t\t.create(bootstrap)\n\t\t\t\t.then(async () => {\n\t\t\t\t\tdone()\n\t\t\t\t})\n\t\t\t\t.catch((error: any) => {\n\t\t\t\t\tfail(error)\n\t\t\t\t\tdone()\n\t\t\t\t})\n\t\t})\n\t})\n})\n",
      "annotation": "au Test component",
      "kind": "snippet",
      "details": "Aurelia <a href=\"https://aurelia.io/docs/testing/components\">Component Test()</a> snippet",
    },
  ],
}
